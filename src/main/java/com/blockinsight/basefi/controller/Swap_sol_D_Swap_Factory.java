package com.my.contract;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class Swap_sol_D_Swap_Factory extends Contract {
    private static final String BINARY = "6080604052600280546001600160a01b031916905534801561002057600080fd5b50600080546001600160a01b03191633179055613170806100426000396000f3fe6080604052600436106100f35760003560e01c806396b5b9b81161008a578063d4ee1d9011610059578063d4ee1d90146103b6578063e490ef1f146103cb578063e955746a14610406578063f2fde38b1461044f576100f3565b806396b5b9b8146102c3578063a3084848146102f1578063af8044201461032c578063b12540f61461036f576100f3565b806378634830116100c6578063786348301461021557806379ba50971461025057806387b6df3e146102655780638da5cb5b146102ae576100f3565b80630319a0a8146100f85780632ec6f6ae1461016e57806357d171211461019f578063748feebe146101d2575b600080fd5b34801561010457600080fd5b5061016c600480360361014081101561011c57600080fd5b506001600160a01b038135811691602081013582169160408201359160608101359160808201359160a08101359160c082013581169160e081013590911690610100810135906101200135610482565b005b34801561017a57600080fd5b5061018361052f565b604080516001600160a01b039092168252519081900360200190f35b3480156101ab57600080fd5b5061016c600480360360208110156101c257600080fd5b50356001600160a01b031661053e565b3480156101de57600080fd5b5061016c600480360360608110156101f557600080fd5b506001600160a01b03813581169160208101359091169060400135610577565b34801561022157600080fd5b5061016c6004803603604081101561023857600080fd5b506001600160a01b03813581169160200135166105e7565b34801561025c57600080fd5b5061016c610651565b34801561027157600080fd5b5061016c6004803603608081101561028857600080fd5b506001600160a01b038135811691602081013590911690604081013590606001356106cc565b3480156102ba57600080fd5b50610183610744565b610183600480360360408110156102d957600080fd5b506001600160a01b0381358116916020013516610753565b3480156102fd57600080fd5b5061016c6004803603604081101561031457600080fd5b506001600160a01b03813581169160200135166107e7565b34801561033857600080fd5b5061016c6004803603606081101561034f57600080fd5b506001600160a01b03813581169160208101359091169060400135610851565b34801561037b57600080fd5b506103a26004803603602081101561039257600080fd5b50356001600160a01b03166108c1565b604080519115158252519081900360200190f35b3480156103c257600080fd5b506101836108d6565b3480156103d757600080fd5b5061016c600480360360408110156103ee57600080fd5b506001600160a01b03813581169160200135166108e5565b34801561041257600080fd5b5061016c6004803603608081101561042957600080fd5b506001600160a01b0381358116916020810135909116906040810135906060013561094f565b34801561045b57600080fd5b5061016c6004803603602081101561047257600080fd5b50356001600160a01b03166109c7565b3360009081526003602052604090205460ff1615156001146104a357600080fd5b604080516001600160a01b03808d168252808c1660208301528183018b9052606082018a90526080820189905260a0820188905280871660c0830152851660e08201526101008101849052610120810183905290517f16c8bc25172a635b4fd4f139dd53efe70d5ef72e2850fc0bf93a05dd2722dcd1918190036101400190a150505050505050505050565b6002546001600160a01b031681565b6000546001600160a01b0316331461055557600080fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b3360009081526003602052604090205460ff16151560011461059857600080fd5b604080516001600160a01b0380861682528416602082015280820183905290517ff7764550e128f51b0d136ae7b6e8f873ee2810f5dff632a3c135f8fa8a94f1959181900360600190a1505050565b3360009081526003602052604090205460ff16151560011461060857600080fd5b604080516001600160a01b0380851682528316602082015281517f5db3ea9a4201bd7f76ac0e192ceed7a6dda5c4b4e131e8932e227c397d2a702b929181900390910190a15050565b6001546001600160a01b0316331461066857600080fd5b600154600080546040516001600160a01b0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b3360009081526003602052604090205460ff1615156001146106ed57600080fd5b604080516001600160a01b038087168252851660208201528082018490526060810183905290517f9734a44d5d016913d10848d6054b8f170e537f98e7efd87c273a069643ec055b9181900360800190a150505050565b6000546001600160a01b031681565b6000803033858560405161076690610a62565b6001600160a01b039485168152928416602084015290831660408084019190915292166060820152905190819003608001906000f0801580156107ad573d6000803e3d6000fd5b506001600160a01b0381166000908152600360205260409020805460ff1916600117905590506107e08133808787610a00565b9392505050565b3360009081526003602052604090205460ff16151560011461080857600080fd5b604080516001600160a01b0380851682528316602082015281517f497895d31ab96eb9cdb56ced09ca195aab3b9caaafb3b00d2cfcff3a8484a1f4929181900390910190a15050565b3360009081526003602052604090205460ff16151560011461087257600080fd5b604080516001600160a01b0380861682528416602082015280820183905290517f570a9b6638ca73f146f68a343dd681146edfcdc596e3c8475e6a62ed5bc8d4cd9181900360600190a1505050565b60036020526000908152604090205460ff1681565b6001546001600160a01b031681565b3360009081526003602052604090205460ff16151560011461090657600080fd5b604080516001600160a01b0380851682528316602082015281517f68d435c7df8adc6001eaeb2e8d85c9b7fc65c6d18553be4d7694806ef68a594b929181900390910190a15050565b3360009081526003602052604090205460ff16151560011461097057600080fd5b604080516001600160a01b038087168252851660208201528082018490526060810183905290517fee03023faef3a18241f3c87edb4480ab58d9127b80a405d243ace7483255b38a9181900360800190a150505050565b6000546001600160a01b031633146109de57600080fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b604080516001600160a01b03808816825280871660208301528086168284015280851660608301528316608082015290517f352b34c53f7e1b13bae693b8fceb4b51e794f0eb30b090eaabf52a43b799d7d09181900360a00190a15050505050565b6126cb80610a708339019056fe6001805460ff60a01b1916905560c06040526005608081905264302e302e3160d81b60a0908152620000359160039190620000e0565b506012805462ffffff191690553480156200004f57600080fd5b50604051620026cb380380620026cb833981810160405260808110156200007557600080fd5b50805160208201516040830151606090930151600080546001600160a01b039384166001600160a01b0319918216331782161790915560028054948416948216949094179093556004805494831694841694909417909355600580549190931691161790556200017c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200012357805160ff191683800117855562000153565b8280016001018555821562000153579182015b828111156200015357825182559160200191906001019062000136565b506200016192915062000165565b5090565b5b8082111562000161576000815560010162000166565b61253f806200018c6000396000f3fe6080604052600436106101f25760003560e01c80638db5a2fd1161010d578063b487efc8116100a0578063d4ee1d901161006f578063d4ee1d9014610747578063d99f22181461075c578063e7f988c214610771578063f2fde38b14610786578063f4630128146107b9576101f9565b8063b487efc814610691578063bd3462fa146106f3578063bff292a514610708578063c821d25b14610732576101f9565b8063a4f4f031116100dc578063a4f4f0311461058c578063a7d16f30146105a1578063a9e6a46714610667578063b23fc1b61461067c576101f9565b80638db5a2fd146105385780638ed95dad1461054d5780639630291c146105625780639b2bb6e014610577576101f9565b806345923557116101855780636f4f07c7116101545780636f4f07c7146103a757806379ba5097146103bc57806382516516146103d15780638da5cb5b14610507576101f9565b80634592355714610353578063631661e214610368578063673fa07f1461037d5780636c9548ed14610392576101f9565b806332f5f0cc116101c157806332f5f0cc1461027557806339e196941461029f5780633d1aecb3146102b4578063447d726b146102c9576101f9565b80630611020e146101fb57806322281bc5146102105780632d59f19d14610237578063324f5e0914610260576101f9565b366101f957005b005b34801561020757600080fd5b506101f96107ce565b34801561021c57600080fd5b506102256109a1565b60408051918252519081900360200190f35b34801561024357600080fd5b5061024c6109a7565b604080519115158252519081900360200190f35b34801561026c57600080fd5b506102256109b7565b34801561028157600080fd5b506101f96004803603602081101561029857600080fd5b50356109bd565b3480156102ab57600080fd5b506101f9610b1c565b3480156102c057600080fd5b5061024c610f7a565b3480156102d557600080fd5b506102de610f89565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610318578181015183820152602001610300565b50505050905090810190601f1680156103455780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561035f57600080fd5b50610225611017565b34801561037457600080fd5b5061022561101d565b34801561038957600080fd5b506101f9611023565b34801561039e57600080fd5b5061022561146a565b3480156103b357600080fd5b506101f9611470565b3480156103c857600080fd5b506101f961162d565b3480156103dd57600080fd5b506102de600480360360408110156103f457600080fd5b810190602081018135600160201b81111561040e57600080fd5b82018360208201111561042057600080fd5b803590602001918460018302840111600160201b8311171561044157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561049357600080fd5b8201836020820111156104a557600080fd5b803590602001918460018302840111600160201b831117156104c657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506116a8945050505050565b34801561051357600080fd5b5061051c6117b7565b604080516001600160a01b039092168252519081900360200190f35b34801561054457600080fd5b5061051c6117c6565b34801561055957600080fd5b506102256117d5565b34801561056e57600080fd5b5061051c6117db565b34801561058357600080fd5b5061051c6117ea565b34801561059857600080fd5b5061051c6117f9565b3480156105ad57600080fd5b506101f9600480360360608110156105c457600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b8111156105f357600080fd5b82018360208201111561060557600080fd5b803590602001918460018302840111600160201b8311171561062657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611808945050505050565b34801561067357600080fd5b5061051c6118bc565b34801561068857600080fd5b5061024c6118cb565b34801561069d57600080fd5b506101f960048036036101008110156106b557600080fd5b508035906020810135906040810135906060810135906001600160a01b03608082013581169160a08101359091169060c08101359060e001356118d4565b3480156106ff57600080fd5b5061051c611ae1565b34801561071457600080fd5b506101f96004803603602081101561072b57600080fd5b5035611af0565b34801561073e57600080fd5b5061051c611c36565b34801561075357600080fd5b5061051c611c45565b34801561076857600080fd5b50610225611c54565b34801561077d57600080fd5b5061024c611c5a565b34801561079257600080fd5b506101f9600480360360208110156107a957600080fd5b50356001600160a01b0316611c68565b3480156107c557600080fd5b50610225611ca1565b60018054600160a01b900460ff16151514610826576040805162461bcd60e51b815260206004820152601360248201527229aa22a81024a72a27902a24229022aa2422a960691b604482015290519081900360640190fd5b60115443111561083557600080fd5b6009546001600160a01b03161580159061085a57506009546001600160a01b03163314155b1561086457600080fd5b600f54600b541061087457600080fd5b600554600f54604080516323b872dd60e01b81523360048201523060248201526044810192909252516000926001600160a01b0316916323b872dd91606480830192602092919082900301818787803b1580156108d057600080fd5b505af11580156108e4573d6000803e3d6000fd5b505050506040513d60208110156108fa57600080fd5b505190508061090857600080fd5b600f54600b5461091791611ca7565b600b55600980546001600160a01b03191633179055610934611cb7565b60025460408051630786348360e41b815230600482015233602482015290516001600160a01b039092169163786348309160448082019260009290919082900301818387803b15801561098657600080fd5b505af115801561099a573d6000803e3d6000fd5b5050505050565b600d5481565b600154600160a01b900460ff1681565b60115481565b6011544311156109cc57600080fd5b6009546001600160a01b031633146109e357600080fd5b600d54600b54106109f357600080fd5b600b54600d540381811115610a055750805b600554604080516323b872dd60e01b81523360048201523060248201526044810184905290516000926001600160a01b0316916323b872dd91606480830192602092919082900301818787803b158015610a5e57600080fd5b505af1158015610a72573d6000803e3d6000fd5b505050506040513d6020811015610a8857600080fd5b5051905080610a9657600080fd5b600b8054830190819055600254604080516374aaba3560e11b8152306004820152336024820152604481018790526064810193909352516001600160a01b039091169163e955746a91608480830192600092919082900301818387803b158015610aff57600080fd5b505af1158015610b13573d6000803e3d6000fd5b50505050505050565b601254600090610100900460ff1615610b6c576040805162461bcd60e51b815260206004820152600d60248201526c13dc1d1a5bdb8810db1bdcd959609a1b604482015290519081900360640190fd5b6012805461ff00191661010017905560105460009043118015610b92575060125460ff16155b15610c315760048054600854600a546040805163a9059cbb60e01b81526001600160a01b039384169581019590955260248501919091525191169163a9059cbb9160448083019260209291908290030181600087803b158015610bf457600080fd5b505af1158015610c08573d6000803e3d6000fd5b505050506040513d6020811015610c1e57600080fd5b5051905080610c2c57600080fd5b600191505b60115443118015610c49575060125460ff1615156001145b15610f0557600a54600c54148015610c645750600b54600d54145b15610d0257600554600854600d546040805163a9059cbb60e01b81526001600160a01b039384166004820152602481019290925251919092169163a9059cbb9160448083019260209291908290030181600087803b158015610cc557600080fd5b505af1158015610cd9573d6000803e3d6000fd5b505050506040513d6020811015610cef57600080fd5b5051905080610cfd57600080fd5b600291505b600a54600c5411158015610d195750600b54600d54115b15610e4c57600554600954600f546040805163a9059cbb60e01b81526001600160a01b039384166004820152602481019290925251919092169163a9059cbb9160448083019260209291908290030181600087803b158015610d7a57600080fd5b505af1158015610d8e573d6000803e3d6000fd5b505050506040513d6020811015610da457600080fd5b5051905080610db257600080fd5b60048054600854600a546040805163a9059cbb60e01b81526001600160a01b039384169581019590955260248501919091525191169163a9059cbb9160448083019260209291908290030181600087803b158015610e0f57600080fd5b505af1158015610e23573d6000803e3d6000fd5b505050506040513d6020811015610e3957600080fd5b5051905080610e4757600080fd5b600391505b600a54600c541115610f0557600454600854600e54600b546001600160a01b039384169363a9059cbb931691610e8291906124cb565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610ec857600080fd5b505af1158015610edc573d6000803e3d6000fd5b505050506040513d6020811015610ef257600080fd5b5051905080610f0057600080fd5b600491505b6002546040805163057c022160e51b81523060048201523360248201526044810185905290516001600160a01b039092169163af8044209160648082019260009290919082900301818387803b158015610f5e57600080fd5b505af1158015610f72573d6000803e3d6000fd5b505050505050565b60125462010000900460ff1681565b6003805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561100f5780601f10610fe45761010080835404028352916020019161100f565b820191906000526020600020905b815481529060010190602001808311610ff257829003601f168201915b505050505081565b600f5481565b60105481565b60125460009062010000900460ff1615611074576040805162461bcd60e51b815260206004820152600d60248201526c13dc1d1a5bdb8810db1bdcd959609a1b604482015290519081900360640190fd5b6012805462ff00001916620100001790556010546000904311801561109c575060125460ff16155b1561113a57600554600954600b546040805163a9059cbb60e01b81526001600160a01b039384166004820152602481019290925251919092169163a9059cbb9160448083019260209291908290030181600087803b1580156110fd57600080fd5b505af1158015611111573d6000803e3d6000fd5b505050506040513d602081101561112757600080fd5b505190508061113557600080fd5b600191505b60115443118015611152575060125460ff1615156001145b1561141157600a54600c541115801561116f5750600b54600d5411155b1561120e5760048054600954600c546040805163a9059cbb60e01b81526001600160a01b039384169581019590955260248501919091525191169163a9059cbb9160448083019260209291908290030181600087803b1580156111d157600080fd5b505af11580156111e5573d6000803e3d6000fd5b505050506040513d60208110156111fb57600080fd5b505190508061120957600080fd5b600291505b600a54600c541180156112255750600b54600d5411155b156113585760048054600954600e546040805163a9059cbb60e01b81526001600160a01b039384169581019590955260248501919091525191169163a9059cbb9160448083019260209291908290030181600087803b15801561128757600080fd5b505af115801561129b573d6000803e3d6000fd5b505050506040513d60208110156112b157600080fd5b50519050806112bf57600080fd5b600554600954600b546040805163a9059cbb60e01b81526001600160a01b039384166004820152602481019290925251919092169163a9059cbb9160448083019260209291908290030181600087803b15801561131b57600080fd5b505af115801561132f573d6000803e3d6000fd5b505050506040513d602081101561134557600080fd5b505190508061135357600080fd5b600391505b600b54600d54111561141157600554600954600f54600b546001600160a01b039384169363a9059cbb93169161138e91906124cb565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156113d457600080fd5b505af11580156113e8573d6000803e3d6000fd5b505050506040513d60208110156113fe57600080fd5b505190508061140c57600080fd5b600491505b60025460408051633a47f75f60e11b81523060048201523360248201526044810185905290516001600160a01b039092169163748feebe9160648082019260009290919082900301818387803b158015610f5e57600080fd5b600b5481565b60018054600160a01b900460ff161515146114c8576040805162461bcd60e51b815260206004820152601360248201527229aa22a81024a72a27902a24229022aa2422a960691b604482015290519081900360640190fd5b6011544311156114d757600080fd5b6008546001600160a01b0316158015906114fc57506008546001600160a01b03163314155b1561150657600080fd5b600e54600a541061151657600080fd5b60048054600e54604080516323b872dd60e01b815233948101949094523060248501526044840191909152516000926001600160a01b03909216916323b872dd91606480830192602092919082900301818787803b15801561157757600080fd5b505af115801561158b573d6000803e3d6000fd5b505050506040513d60208110156115a157600080fd5b50519050806115af57600080fd5b600e54600a546115be91611ca7565b600a55600880546001600160a01b031916331790556115db611cb7565b6002546040805163e490ef1f60e01b815230600482015233602482015290516001600160a01b039092169163e490ef1f9160448082019260009290919082900301818387803b15801561098657600080fd5b6001546001600160a01b0316331461164457600080fd5b600154600080546040516001600160a01b0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b805182516060918491849184910160040167ffffffffffffffff811180156116cf57600080fd5b506040519080825280601f01601f1916602001820160405280156116fa576020820181803683370190505b509050806000805b85518110156117535785818151811061171757fe5b602001015160f81c60f81b83838060010194508151811061173457fe5b60200101906001600160f81b031916908160001a905350600101611702565b5060005b84518110156117a85784818151811061176c57fe5b602001015160f81c60f81b83838060010194508151811061178957fe5b60200101906001600160f81b031916908160001a905350600101611757565b50919450505050505b92915050565b6000546001600160a01b031681565b6004546001600160a01b031681565b600c5481565b6006546001600160a01b031681565b6005546001600160a01b031681565b6009546001600160a01b031681565b6000546001600160a01b0316331461181f57600080fd5b826001600160a01b031682826040518082805190602001908083835b6020831061185a5780518252601f19909201916020918201910161183b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610f72576040519150601f19603f3d011682016040523d82523d6000602084013e610f72565b6007546001600160a01b031681565b60125460ff1681565b6000546001600160a01b031633146118eb57600080fd5b8588101580156118fb5750848710155b61193e576040805162461bcd60e51b815260206004820152600f60248201526e1253131151d0531148105353d55395608a1b604482015290519081900360640190fd5b600154600160a01b900460ff16156119875760405162461bcd60e51b81526004018080602001828103825260298152602001806124e16029913960400191505060405180910390fd5b8082106119db576040805162461bcd60e51b815260206004820152601d60248201527f4e4f2054494d45204d414348494e4520494e2054484520474152414745000000604482015290519081900360640190fd5b6001805460ff60a01b1916600160a01b179055600c889055600d879055600e869055600f859055600880546001600160a01b038087166001600160a01b0319928316811790935560098054878316931683179055438086016010558401601155600254604080516263341560e31b8152306004820152336024820152604481018e9052606481018d9052608481018c905260a481018b905260c481019590955260e4850193909352610104840186905261012484018590529151911691630319a0a89161014480830192600092919082900301818387803b158015611abf57600080fd5b505af1158015611ad3573d6000803e3d6000fd5b505050505050505050505050565b6008546001600160a01b031681565b601154431115611aff57600080fd5b6008546001600160a01b03163314611b1657600080fd5b600c54600a5410611b2657600080fd5b600a54600c540381811115611b385750805b60048054604080516323b872dd60e01b8152339381019390935230602484015260448301849052516000926001600160a01b03909216916323b872dd91606480830192602092919082900301818787803b158015611b9557600080fd5b505af1158015611ba9573d6000803e3d6000fd5b505050506040513d6020811015611bbf57600080fd5b5051905080611bcd57600080fd5b600a8054830190819055600254604080516343db6f9f60e11b8152306004820152336024820152604481018790526064810193909352516001600160a01b03909116916387b6df3e91608480830192600092919082900301818387803b158015610aff57600080fd5b6002546001600160a01b031681565b6001546001600160a01b031681565b600e5481565b601254610100900460ff1681565b6000546001600160a01b03163314611c7f57600080fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600a5481565b818101828110156117b157600080fd5b600254604080516317637b5760e11b815290516000926001600160a01b031691632ec6f6ae916004808301926020929190829003018186803b158015611cfc57600080fd5b505afa158015611d10573d6000803e3d6000fd5b505050506040513d6020811015611d2657600080fd5b5051600e54600a5491925011801590611d435750600f54600b5410155b8015611d5157506010544311155b156124c8576012805460ff19166001179055600d5460048054604080516306fdde0360e01b815290516001600160a01b038087169563af5057d99530959194611ec09492909316926306fdde039281830192600092829003018186803b158015611dba57600080fd5b505afa158015611dce573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611df757600080fd5b8101908080516040519392919084600160201b821115611e1657600080fd5b908301906020820185811115611e2b57600080fd5b8251600160201b811182820188101715611e4457600080fd5b82525081516020918201929091019080838360005b83811015611e71578181015183820152602001611e59565b50505050905090810190601f168015611e9e5780820380516001836020036101000a031916815260200191505b5060408181019052600381526205f4f560ec1b602082015292506116a8915050565b611f11600460009054906101000a90046001600160a01b03166001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611dba57600080fd5b600480546040805163313ce56760e01b815290516001600160a01b039092169263313ce567928282019260209290829003018186803b158015611f5357600080fd5b505afa158015611f67573d6000803e3d6000fd5b505050506040513d6020811015611f7d57600080fd5b50516040516001600160e01b031960e088901b1681526001600160a01b038616600482019081526024820186905260ff8316608483015260a060448301908152855160a4840152855191929091606482019160c40190602088019080838360005b83811015611ff6578181015183820152602001611fde565b50505050905090810190601f1680156120235780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b8381101561205657818101518382015260200161203e565b50505050905090810190601f1680156120835780820380516001836020036101000a031916815260200191505b50975050505050505050602060405180830381600087803b1580156120a757600080fd5b505af11580156120bb573d6000803e3d6000fd5b505050506040513d60208110156120d157600080fd5b5051600680546001600160a01b0319166001600160a01b039283161790819055600854600d546040805163a9059cbb60e01b81529285166004840152602483019190915251919092169163a9059cbb9160448083019260209291908290030181600087803b15801561214257600080fd5b505af1158015612156573d6000803e3d6000fd5b505050506040513d602081101561216c57600080fd5b5050600c54600554604080516306fdde0360e01b815290516001600160a01b038581169463af5057d994309491936121c793909116916306fdde03916004808301926000929190829003018186803b158015611dba57600080fd5b600554604080516395d89b4160e01b8152905161220d926001600160a01b0316916395d89b41916004808301926000929190829003018186803b158015611dba57600080fd5b600560009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561225b57600080fd5b505afa15801561226f573d6000803e3d6000fd5b505050506040513d602081101561228557600080fd5b50516040516001600160e01b031960e088901b1681526001600160a01b038616600482019081526024820186905260ff8316608483015260a060448301908152855160a4840152855191929091606482019160c40190602088019080838360005b838110156122fe5781810151838201526020016122e6565b50505050905090810190601f16801561232b5780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b8381101561235e578181015183820152602001612346565b50505050905090810190601f16801561238b5780820380516001836020036101000a031916815260200191505b50975050505050505050602060405180830381600087803b1580156123af57600080fd5b505af11580156123c3573d6000803e3d6000fd5b505050506040513d60208110156123d957600080fd5b5051600780546001600160a01b0319166001600160a01b039283161790819055600954600c546040805163a9059cbb60e01b81529285166004840152602483019190915251919092169163a9059cbb9160448083019260209291908290030181600087803b15801561244a57600080fd5b505af115801561245e573d6000803e3d6000fd5b505050506040513d602081101561247457600080fd5b505060025460408051631461090960e31b815230600482015233602482015290516001600160a01b039092169163a30848489160448082019260009290919082900301818387803b15801561098657600080fd5b50565b6000828211156124da57600080fd5b5090039056fe4e4f204d414e204556455220535445505320494e205448452053414d45205249564552205457494345a264697066735822122005c1e7260934b74f8700fbf98608442c1447b552cf718f0faa516069fb3ea47c64736f6c634300060c0033a2646970667358221220c937625e10ec8b87de967762f25b0d2c57aa155c7b0a5d3b911dbaad3ad421d964736f6c634300060c0033";

    protected Swap_sol_D_Swap_Factory(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Swap_sol_D_Swap_Factory(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<E_Claim_For_HeadEventResponse> getE_Claim_For_HeadEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("E_Claim_For_Head", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<E_Claim_For_HeadEventResponse> responses = new ArrayList<E_Claim_For_HeadEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            E_Claim_For_HeadEventResponse typedResponse = new E_Claim_For_HeadEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.swap = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<E_Claim_For_HeadEventResponse> e_Claim_For_HeadEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("E_Claim_For_Head", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, E_Claim_For_HeadEventResponse>() {
            @Override
            public E_Claim_For_HeadEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                E_Claim_For_HeadEventResponse typedResponse = new E_Claim_For_HeadEventResponse();
                typedResponse.log = log;
                typedResponse.swap = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<E_Claim_For_TailEventResponse> getE_Claim_For_TailEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("E_Claim_For_Tail", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<E_Claim_For_TailEventResponse> responses = new ArrayList<E_Claim_For_TailEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            E_Claim_For_TailEventResponse typedResponse = new E_Claim_For_TailEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.swap = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<E_Claim_For_TailEventResponse> e_Claim_For_TailEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("E_Claim_For_Tail", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, E_Claim_For_TailEventResponse>() {
            @Override
            public E_Claim_For_TailEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                E_Claim_For_TailEventResponse typedResponse = new E_Claim_For_TailEventResponse();
                typedResponse.log = log;
                typedResponse.swap = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<E_CreateEventResponse> getE_CreateEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("E_Create", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<E_CreateEventResponse> responses = new ArrayList<E_CreateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            E_CreateEventResponse typedResponse = new E_CreateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.swap = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.swap_owner = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.token_head = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.token_tail = (String) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<E_CreateEventResponse> e_CreateEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("E_Create", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, E_CreateEventResponse>() {
            @Override
            public E_CreateEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                E_CreateEventResponse typedResponse = new E_CreateEventResponse();
                typedResponse.log = log;
                typedResponse.swap = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.swap_owner = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.token_head = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.token_tail = (String) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public List<E_Deposit_For_HeadEventResponse> getE_Deposit_For_HeadEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("E_Deposit_For_Head", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<E_Deposit_For_HeadEventResponse> responses = new ArrayList<E_Deposit_For_HeadEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            E_Deposit_For_HeadEventResponse typedResponse = new E_Deposit_For_HeadEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.swap = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.deposited_amount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<E_Deposit_For_HeadEventResponse> e_Deposit_For_HeadEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("E_Deposit_For_Head", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, E_Deposit_For_HeadEventResponse>() {
            @Override
            public E_Deposit_For_HeadEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                E_Deposit_For_HeadEventResponse typedResponse = new E_Deposit_For_HeadEventResponse();
                typedResponse.log = log;
                typedResponse.swap = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.deposited_amount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<E_Deposit_For_TailEventResponse> getE_Deposit_For_TailEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("E_Deposit_For_Tail", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<E_Deposit_For_TailEventResponse> responses = new ArrayList<E_Deposit_For_TailEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            E_Deposit_For_TailEventResponse typedResponse = new E_Deposit_For_TailEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.swap = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.deposited_amount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<E_Deposit_For_TailEventResponse> e_Deposit_For_TailEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("E_Deposit_For_Tail", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, E_Deposit_For_TailEventResponse>() {
            @Override
            public E_Deposit_For_TailEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                E_Deposit_For_TailEventResponse typedResponse = new E_Deposit_For_TailEventResponse();
                typedResponse.log = log;
                typedResponse.swap = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.deposited_amount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<E_EntanglementEventResponse> getE_EntanglementEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("E_Entanglement", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<E_EntanglementEventResponse> responses = new ArrayList<E_EntanglementEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            E_EntanglementEventResponse typedResponse = new E_EntanglementEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.swap = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<E_EntanglementEventResponse> e_EntanglementEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("E_Entanglement", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, E_EntanglementEventResponse>() {
            @Override
            public E_EntanglementEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                E_EntanglementEventResponse typedResponse = new E_EntanglementEventResponse();
                typedResponse.log = log;
                typedResponse.swap = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<E_InitializeEventResponse> getE_InitializeEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("E_Initialize", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<E_InitializeEventResponse> responses = new ArrayList<E_InitializeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            E_InitializeEventResponse typedResponse = new E_InitializeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.swap = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.total_amount_head = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.total_amount_tail = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.limit_head = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.limit_tail = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.rival_head = (String) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse.rival_tail = (String) eventValues.getNonIndexedValues().get(7).getValue();
            typedResponse.pair_dlo = (BigInteger) eventValues.getNonIndexedValues().get(8).getValue();
            typedResponse.option_dlo = (BigInteger) eventValues.getNonIndexedValues().get(9).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<E_InitializeEventResponse> e_InitializeEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("E_Initialize", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, E_InitializeEventResponse>() {
            @Override
            public E_InitializeEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                E_InitializeEventResponse typedResponse = new E_InitializeEventResponse();
                typedResponse.log = log;
                typedResponse.swap = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.total_amount_head = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.total_amount_tail = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.limit_head = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.limit_tail = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse.rival_head = (String) eventValues.getNonIndexedValues().get(6).getValue();
                typedResponse.rival_tail = (String) eventValues.getNonIndexedValues().get(7).getValue();
                typedResponse.pair_dlo = (BigInteger) eventValues.getNonIndexedValues().get(8).getValue();
                typedResponse.option_dlo = (BigInteger) eventValues.getNonIndexedValues().get(9).getValue();
                return typedResponse;
            }
        });
    }

    public List<E_Withdraw_HeadEventResponse> getE_Withdraw_HeadEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("E_Withdraw_Head", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<E_Withdraw_HeadEventResponse> responses = new ArrayList<E_Withdraw_HeadEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            E_Withdraw_HeadEventResponse typedResponse = new E_Withdraw_HeadEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.swap = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<E_Withdraw_HeadEventResponse> e_Withdraw_HeadEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("E_Withdraw_Head", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, E_Withdraw_HeadEventResponse>() {
            @Override
            public E_Withdraw_HeadEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                E_Withdraw_HeadEventResponse typedResponse = new E_Withdraw_HeadEventResponse();
                typedResponse.log = log;
                typedResponse.swap = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<E_Withdraw_TailEventResponse> getE_Withdraw_TailEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("E_Withdraw_Tail", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<E_Withdraw_TailEventResponse> responses = new ArrayList<E_Withdraw_TailEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            E_Withdraw_TailEventResponse typedResponse = new E_Withdraw_TailEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.swap = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<E_Withdraw_TailEventResponse> e_Withdraw_TailEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("E_Withdraw_Tail", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, E_Withdraw_TailEventResponse>() {
            @Override
            public E_Withdraw_TailEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                E_Withdraw_TailEventResponse typedResponse = new E_Withdraw_TailEventResponse();
                typedResponse.log = log;
                typedResponse.swap = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public static RemoteCall<Swap_sol_D_Swap_Factory> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Swap_sol_D_Swap_Factory.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Swap_sol_D_Swap_Factory> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Swap_sol_D_Swap_Factory.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public RemoteCall<TransactionReceipt> Create(String token_head, String token_tail) {
        final Function function = new Function(
                "Create", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(token_head), 
                new org.web3j.abi.datatypes.Address(token_tail)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> Set_ERC20_Gen_Lib(String lib) {
        final Function function = new Function(
                "Set_ERC20_Gen_Lib", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(lib)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> Triger_Claim_For_Head(String swap, String user) {
        final Function function = new Function(
                "Triger_Claim_For_Head", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(swap), 
                new org.web3j.abi.datatypes.Address(user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> Triger_Claim_For_Tail(String swap, String user) {
        final Function function = new Function(
                "Triger_Claim_For_Tail", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(swap), 
                new org.web3j.abi.datatypes.Address(user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> Triger_Deposit_For_Head(String swap, String user, BigInteger amount, BigInteger deposited_amount) {
        final Function function = new Function(
                "Triger_Deposit_For_Head", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(swap), 
                new org.web3j.abi.datatypes.Address(user), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.Uint256(deposited_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> Triger_Deposit_For_Tail(String swap, String user, BigInteger amount, BigInteger deposited_amount) {
        final Function function = new Function(
                "Triger_Deposit_For_Tail", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(swap), 
                new org.web3j.abi.datatypes.Address(user), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.Uint256(deposited_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> Triger_Entanglement(String swap, String user) {
        final Function function = new Function(
                "Triger_Entanglement", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(swap), 
                new org.web3j.abi.datatypes.Address(user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> Triger_Initialize(String swap, String user, BigInteger total_amount_head, BigInteger total_amount_tail, BigInteger limit_head, BigInteger limit_tail, String rival_head, String rival_tail, BigInteger pair_dlo, BigInteger option_dlo) {
        final Function function = new Function(
                "Triger_Initialize", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(swap), 
                new org.web3j.abi.datatypes.Address(user), 
                new org.web3j.abi.datatypes.generated.Uint256(total_amount_head), 
                new org.web3j.abi.datatypes.generated.Uint256(total_amount_tail), 
                new org.web3j.abi.datatypes.generated.Uint256(limit_head), 
                new org.web3j.abi.datatypes.generated.Uint256(limit_tail), 
                new org.web3j.abi.datatypes.Address(rival_head), 
                new org.web3j.abi.datatypes.Address(rival_tail), 
                new org.web3j.abi.datatypes.generated.Uint256(pair_dlo), 
                new org.web3j.abi.datatypes.generated.Uint256(option_dlo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> Triger_Withdraw_Head(String swap, String user, BigInteger status) {
        final Function function = new Function(
                "Triger_Withdraw_Head", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(swap), 
                new org.web3j.abi.datatypes.Address(user), 
                new org.web3j.abi.datatypes.generated.Uint256(status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> Triger_Withdraw_Tail(String swap, String user, BigInteger status) {
        final Function function = new Function(
                "Triger_Withdraw_Tail", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(swap), 
                new org.web3j.abi.datatypes.Address(user), 
                new org.web3j.abi.datatypes.generated.Uint256(status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> acceptOwnership() {
        final Function function = new Function(
                "acceptOwnership", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> m_ERC20_Gen_Lib() {
        final Function function = new Function(
                "m_ERC20_Gen_Lib", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> m_My_Dear_Son(String param0) {
        final Function function = new Function(
                "m_My_Dear_Son", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> newOwner() {
        final Function function = new Function(
                "newOwner", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> owner() {
        final Function function = new Function(
                "owner", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String _newOwner) {
        final Function function = new Function(
                "transferOwnership", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static Swap_sol_D_Swap_Factory load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Swap_sol_D_Swap_Factory(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Swap_sol_D_Swap_Factory load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Swap_sol_D_Swap_Factory(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class E_Claim_For_HeadEventResponse {
        public Log log;

        public String swap;

        public String user;
    }

    public static class E_Claim_For_TailEventResponse {
        public Log log;

        public String swap;

        public String user;
    }

    public static class E_CreateEventResponse {
        public Log log;

        public String swap;

        public String user;

        public String swap_owner;

        public String token_head;

        public String token_tail;
    }

    public static class E_Deposit_For_HeadEventResponse {
        public Log log;

        public String swap;

        public String user;

        public BigInteger amount;

        public BigInteger deposited_amount;
    }

    public static class E_Deposit_For_TailEventResponse {
        public Log log;

        public String swap;

        public String user;

        public BigInteger amount;

        public BigInteger deposited_amount;
    }

    public static class E_EntanglementEventResponse {
        public Log log;

        public String swap;

        public String user;
    }

    public static class E_InitializeEventResponse {
        public Log log;

        public String swap;

        public String user;

        public BigInteger total_amount_head;

        public BigInteger total_amount_tail;

        public BigInteger limit_head;

        public BigInteger limit_tail;

        public String rival_head;

        public String rival_tail;

        public BigInteger pair_dlo;

        public BigInteger option_dlo;
    }

    public static class E_Withdraw_HeadEventResponse {
        public Log log;

        public String swap;

        public String user;

        public BigInteger status;
    }

    public static class E_Withdraw_TailEventResponse {
        public Log log;

        public String swap;

        public String user;

        public BigInteger status;
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public String _from;

        public String _to;
    }
}
